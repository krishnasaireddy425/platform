{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Organization Platform API",
		"description": "Complete API testing for multi-tenant organization platform with JWT authentication and role-based access control.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health & Setup",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Application is UP\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UP\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/actuator/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Platform Admin",
			"item": [
				{
					"name": "Platform Owner Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"accessToken\");",
									"    pm.expect(jsonData).to.have.property(\"mustChangePassword\");",
									"    pm.expect(jsonData.mustChangePassword).to.be.false;",
									"    pm.collectionVariables.set(\"platformToken\", jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@platform.local\",\n  \"password\": \"owner123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/platform/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"platform",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Organization created\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.collectionVariables.set(\"orgId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{platformToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Demo Corporation\",\n  \"slug\": \"demo-corp\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/platform/orgs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"platform",
								"orgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Org Owner invitation created\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"invitation\");",
									"    pm.expect(jsonData).to.have.property(\"tempPassword\");",
									"    pm.expect(jsonData).to.have.property(\"displayName\");",
									"    pm.expect(jsonData.invitation).to.have.property(\"id\");",
									"    pm.expect(jsonData.invitation).to.have.property(\"email\");",
									"    pm.expect(jsonData.invitation.status).to.eql(\"PENDING\");",
									"    pm.collectionVariables.set(\"orgOwnerInviteId\", jsonData.invitation.id);",
									"    pm.collectionVariables.set(\"tempPassword\", jsonData.tempPassword);",
									"    console.log(\"Generated temp password: \" + jsonData.tempPassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{platformToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@demo.com\",\n  \"displayName\": \"Demo Owner\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/platform/orgs/{{orgId}}/owner",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"platform",
								"orgs",
								"{{orgId}}",
								"owner"
							]
						}
					},
					"response": []
				},
				{
					"name": "Platform Owner Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Platform Owner logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{platformToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/platform/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"platform",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. User Authentication",
			"item": [
				{
					"name": "Org Owner First Login (Temp Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Org Owner login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"accessToken\");",
									"    pm.expect(jsonData).to.have.property(\"mustChangePassword\");",
									"    pm.expect(jsonData.mustChangePassword).to.be.true;",
									"    pm.collectionVariables.set(\"orgOwnerToken\", jsonData.accessToken);",
									"    console.log(\"First login - must change password: \" + jsonData.mustChangePassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@demo.com\",\n  \"password\": \"{{tempPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User Profile (Must Change Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User must change password\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.mustChangePassword).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{orgOwnerToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/me/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Password changed successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{orgOwnerToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\": \"TempOwner123\",\n  \"newPassword\": \"SecureOwnerPass123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Org Owner Login (New Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login with new password successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"accessToken\");",
									"    pm.expect(jsonData).to.have.property(\"mustChangePassword\");",
									"    pm.expect(jsonData.mustChangePassword).to.be.false;",
									"    pm.collectionVariables.set(\"orgOwnerToken\", jsonData.accessToken);",
									"    console.log(\"After password change - must change password: \" + jsonData.mustChangePassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@demo.com\",\n  \"password\": \"SecureOwnerPass123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{orgOwnerToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Invitation Flow",
			"item": [
				{
					"name": "Create User Invitation (by Org Owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invitation created\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"invitation\");",
									"    pm.expect(jsonData).to.have.property(\"tempPassword\");",
									"    pm.expect(jsonData.invitation.status).to.eql(\"PENDING\");",
									"    pm.collectionVariables.set(\"inviteId\", jsonData.invitation.id);",
									"    pm.collectionVariables.set(\"tempPassword\", jsonData.tempPassword);",
									"    console.log(\"Generated temp password: \" + jsonData.tempPassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{orgOwnerToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"alice@demo.com\",\n  \"roleName\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orgs/{{orgId}}/invites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orgs",
								"{{orgId}}",
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User First Login (Temp Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New user login with temp password successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"accessToken\");",
									"    pm.expect(jsonData).to.have.property(\"mustChangePassword\");",
									"    pm.expect(jsonData.mustChangePassword).to.be.true;",
									"    pm.collectionVariables.set(\"userTempToken\", jsonData.accessToken);",
									"    console.log(\"New user first login - must change password: \" + jsonData.mustChangePassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"alice@demo.com\",\n  \"password\": \"{{tempPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User Changes Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Password changed successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userTempToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\": \"{{tempPassword}}\",\n  \"newPassword\": \"AliceSecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "New User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New user login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"accessToken\");",
									"    pm.expect(jsonData).to.have.property(\"mustChangePassword\");",
									"    pm.expect(jsonData.mustChangePassword).to.be.false;",
									"    pm.collectionVariables.set(\"userToken\", jsonData.accessToken);",
									"    console.log(\"User login after password change - must change password: \" + jsonData.mustChangePassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"alice@demo.com\",\n  \"password\": \"AliceSecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Another Invitation (by ADMIN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ADMIN can create invitations\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"invitation\");",
									"    pm.expect(jsonData).to.have.property(\"tempPassword\");",
									"    pm.expect(jsonData.invitation.role.name).to.eql(\"USER\");",
									"    console.log(\"Bob's temp password: \" + jsonData.tempPassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"bob@demo.com\",\n  \"roleName\": \"USER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orgs/{{orgId}}/invites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orgs",
								"{{orgId}}",
								"invites"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. User Profile & Memberships",
			"item": [
				{
					"name": "Get My Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Profile retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.mustChangePassword).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/me/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Memberships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Memberships retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('role');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/me/memberships",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"me",
								"memberships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Org Owner Memberships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner memberships retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].role.name).to.eql('OWNER');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{orgOwnerToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/me/memberships",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"me",
								"memberships"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Error Testing",
			"item": [
				{
					"name": "Invalid Platform Owner Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid credentials rejected\", function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Invalid credentials\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@platform.local\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/platform/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"platform",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid user credentials rejected\", function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Invalid credentials\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"alice@demo.com\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Access (No Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized access blocked\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@demo.com\",\n  \"roleName\": \"USER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orgs/{{orgId}}/invites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orgs",
								"{{orgId}}",
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Organization Slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Duplicate slug rejected\", function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{platformToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Another Demo\",\n  \"slug\": \"demo-corp\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/platform/orgs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"platform",
								"orgs"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "platformToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "orgOwnerToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "orgId",
			"value": "",
			"type": "string"
		},
		{
			"key": "orgOwnerId",
			"value": "",
			"type": "string"
		},
		{
			"key": "inviteId",
			"value": "",
			"type": "string"
		},
		{
			"key": "tempPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "userTempToken",
			"value": "",
			"type": "string"
		}
	]
} 